// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package models

import (
	"context"
)

const createPartner = `-- name: CreatePartner :one
INSERT INTO partners (
    partnername, servicename, latitude, longitude, material, radius, rating
) VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, partnername, servicename, latitude, longitude, material, radius, rating
`

type CreatePartnerParams struct {
	Partnername string  `db:"partnername"`
	Servicename string  `db:"servicename"`
	Latitude    float64 `db:"latitude"`
	Longitude   float64 `db:"longitude"`
	Material    string  `db:"material"`
	Radius      int32   `db:"radius"`
	Rating      float64 `db:"rating"`
}

func (q *Queries) CreatePartner(ctx context.Context, arg CreatePartnerParams) (Partner, error) {
	row := q.db.QueryRowContext(ctx, createPartner,
		arg.Partnername,
		arg.Servicename,
		arg.Latitude,
		arg.Longitude,
		arg.Material,
		arg.Radius,
		arg.Rating,
	)
	var i Partner
	err := row.Scan(
		&i.ID,
		&i.Partnername,
		&i.Servicename,
		&i.Latitude,
		&i.Longitude,
		&i.Material,
		&i.Radius,
		&i.Rating,
	)
	return i, err
}

const getPartner = `-- name: GetPartner :one
SELECT id, partnername, servicename, latitude, longitude, material, radius, rating FROM partners
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPartner(ctx context.Context, id int64) (Partner, error) {
	row := q.db.QueryRowContext(ctx, getPartner, id)
	var i Partner
	err := row.Scan(
		&i.ID,
		&i.Partnername,
		&i.Servicename,
		&i.Latitude,
		&i.Longitude,
		&i.Material,
		&i.Radius,
		&i.Rating,
	)
	return i, err
}

const listPartners = `-- name: ListPartners :many
SELECT id, partnername, servicename, latitude, longitude, material, radius, rating FROM partners
WHERE servicename = $1 AND material like $2
ORDER BY radius ASC
`

type ListPartnersParams struct {
	Servicename string `db:"servicename"`
	Material    string `db:"material"`
}

func (q *Queries) ListPartners(ctx context.Context, arg ListPartnersParams) ([]Partner, error) {
	rows, err := q.db.QueryContext(ctx, listPartners, arg.Servicename, arg.Material)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Partner
	for rows.Next() {
		var i Partner
		if err := rows.Scan(
			&i.ID,
			&i.Partnername,
			&i.Servicename,
			&i.Latitude,
			&i.Longitude,
			&i.Material,
			&i.Radius,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
